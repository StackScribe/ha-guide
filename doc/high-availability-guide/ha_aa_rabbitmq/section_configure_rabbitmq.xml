<?xml version="1.0" encoding="UTF-8"?>
<section xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  version="5.0"
  xml:id="_configure_rabbitmq">
  <title>Configure RabbitMQ</title>
  <para>We are building a cluster of RabbitMQ nodes to construct a
    RabbitMQ broker, a logical grouping of several Erlang nodes.</para>
  <para>We have to consider that while exchanges and bindings will survive
    the loss of individual nodes, queues and their messages will not because a
    queue and its contents is located on one node. If we lose this node, we
    also lose the queue.</para>
  <para>Mirrored queues in RabbitMQ improve the availability
    of service since it will be resilient to failures.</para>
  <para>We consider that we run (at least) two RabbitMQ servers and we call the
    nodes <literal>rabbit1</literal> and <literal>rabbit2</literal>. To build a
    broker, we need to ensure that all nodes have the same Erlang cookie
    file.</para>
  <para>To do so, stop RabbitMQ everywhere and copy the cookie from the first
    node to the other node(s):</para>
  <screen><prompt>#</prompt> <userinput>scp /var/lib/rabbitmq/.erlang.cookie \
root@<replaceable>NODE</replaceable>:/var/lib/rabbitmq/.erlang.cookie</userinput></screen>
  <para>On the target nodes ensure the correct owner, group, and permissions of the
    <filename>.erlang.cookie</filename> file:</para>
  <screen><prompt>#</prompt> <userinput>chown rabbitmq:rabbitmq /var/lib/rabbitmq/.erlang.cookie</userinput>
<prompt>#</prompt> <userinput>chmod 400 /var/lib/rabbitmq/.erlang.cookie</userinput></screen>
  <para>Start RabbitMQ on all nodes and verify the nodes are running:</para>
  <screen><prompt>#</prompt> <userinput>rabbitmqctl cluster_status</userinput>
<computeroutput>Cluster status of node rabbit@<replaceable>NODE</replaceable>...
[{nodes,[{disc,[rabbit@<replaceable>NODE</replaceable>]}]},
 {running_nodes,[rabbit@<replaceable>NODE</replaceable>]},
 {partitions,[]}]
...done.</computeroutput></screen>
  <para>Run the following commands on all nodes except the first one:</para>
  <screen><prompt>#</prompt> <userinput>rabbitmqctl stop_app</userinput>
<computeroutput>Stopping node rabbit@<replaceable>NODE</replaceable>...
...done.</computeroutput>
<prompt>#</prompt> <userinput>rabbitmqctl join_cluster rabbit@rabbit1</userinput>
<prompt>#</prompt> <userinput>rabbitmqctl start_app</userinput>
<computeroutput>Starting node rabbit@<replaceable>NODE</replaceable> ...
...done.</computeroutput></screen>
  <para>To verify the cluster status:</para>
  <screen><prompt>#</prompt> <userinput>rabbitmqctl cluster_status</userinput>
<computeroutput>Cluster status of node rabbit@<replaceable>NODE</replaceable>...
[{nodes,[{disc,[rabbit@rabbit1]},{ram,[rabbit@<replaceable>NODE</replaceable>]}]},{running_nodes,[rabbit@<replaceable>NODE</replaceable>,rabbit@rabbit1]}]</computeroutput></screen>
  <para>If the cluster is working, you can now proceed to creating users and
    passwords for queues.</para>
  <para>To ensure that all queues, except those with auto-generated names, are
    mirrored across all running nodes it is necessary to set the policy key
    <literal>ha-mode</literal> to <literal>all</literal>. Run the following
    command on one of the nodes:</para>
  <screen><prompt>#</prompt> <userinput>rabbitmqctl set_policy ha-all '^(?!amq\.).*' '{"ha-mode": "all"}'</userinput></screen>
  <note>
    <para>More information about <link xlink:href="http://www.rabbitmq.com/ha.html">
      highly available queues</link> and
      <link xlink:href="https://www.rabbitmq.com/clustering.html">
      clustering</link> can be found in the official RabbitMQ
      documentation.</para>
  </note>
</section>
